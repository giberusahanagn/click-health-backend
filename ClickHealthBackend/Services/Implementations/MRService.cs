using ClickHealthBackend.Models;
using ClickHealthBackend.Repositories.Interfaces;
using ClickHealthBackend.Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
// Assuming Enums are accessible (e.g., from ClickHealthBackend.Common.Enums)
using ClickHealthBackend.Enums;

namespace ClickHealthBackend.Services.Implementation
{
    public class MRService : IMRService
    {
        private readonly IUserRepository _userRepository;
        private readonly IMRActivityRepository _mrActivityRepository;
        private readonly IContentRepository _contentRepository;
        private readonly IPatientInviteRepository _patientInviteRepository;
        private readonly IHCPActivityRepository _hcpActivityRepository;

        // NOTE: The dependencies here remain the interfaces, but their concrete implementations
        // are now expected to use the MongoDbContext internally.
        public MRService(
            IUserRepository userRepository,
            IMRActivityRepository mrActivityRepository,
            IContentRepository contentRepository,
            IPatientInviteRepository patientInviteRepository,
            IHCPActivityRepository hcpActivityRepository)
        {
            _userRepository = userRepository;
            _mrActivityRepository = mrActivityRepository;
            _contentRepository = contentRepository;
            _patientInviteRepository = patientInviteRepository;
            _hcpActivityRepository = hcpActivityRepository;
        }

        public async Task<string> OnboardHCPAsync(string mrUserId, string hcpName, string hcpEmail, string hcpPhone, string territory, string specialty)
        {
            // Create a new user record for the HCP
            var newUser = new User
            {
                Email = hcpEmail,
                Phone = hcpPhone,
                Role = UserRole.HCP,
                Territory = territory,
                Specialty = specialty,
                IsActive = false // Awaiting Admin approval
            };
            await _userRepository.CreateAsync(newUser);

            // Log the onboarding activity
            await _mrActivityRepository.CreateAsync(new MRActivity
            {
                MrUserId = mrUserId,
                MrActivityType = MRActivityType.HCPOnboard,
                HcpUserId = newUser.UserId,
                Territory = territory,
                Timestamp = DateTime.UtcNow,
                Notes = $"HCP Onboarded: {hcpName}"
            });

            return newUser.UserId;
        }

        public async Task<bool> ShareContentWithHCPAsync(string mrUserId, string hcpUserId, string contentId)
        {
            // Check if the content is approved before sharing
            var content = await _contentRepository.GetByIdAsync(contentId);
            if (content == null || content.Status != ContentStatus.Approved)
            {
                return false; // Cannot share unapproved content
            }

            // Log the content sharing activity
            await _mrActivityRepository.CreateAsync(new MRActivity
            {
                MrUserId = mrUserId,
                MrActivityType = MRActivityType.PackShare,
                HcpUserId = hcpUserId,
                Timestamp = DateTime.UtcNow,
                Notes = $"Content shared: {contentId}"
            });

            return true;
        }

        public async Task LogFieldFeedbackAsync(string mrUserId, string notes)
        {
            // Log the field feedback provided by the MR
            await _mrActivityRepository.CreateAsync(new MRActivity
            {
                MrUserId = mrUserId,
                MrActivityType = MRActivityType.Feedback,
                Timestamp = DateTime.UtcNow,
                Notes = notes
            });
        }

        public async Task<object> GetTerritorySnapshotAsync(string mrUserId)
        {
            // Get the MR's user details to find their territory
            var mr = await _userRepository.GetByIdAsync(mrUserId);
            if (mr == null) return null;

            // 1. Get all active HCPs in the MR's territory (using GetAllAsync and filtering in memory/LINQ)
            var activeHcps = (await _userRepository.GetAllAsync())
                                .Where(u => u.Role == UserRole.HCP && u.Territory == mr.Territory && u.IsActive).ToList();

            // 2. Get patient invite count from invites generated by HCPs in this territory
            var hcpIdsInTerritory = activeHcps.Select(u => u.UserId).ToList();
            var patientInvites = (await _patientInviteRepository.GetAllAsync())
                                .Where(i => hcpIdsInTerritory.Contains(i.HcpUserId));

            // Return anonymous object snapshot (for demonstration)
            return new
            {
                ActiveHcpCount = activeHcps.Count(),
                PatientInviteCount = patientInvites.Count()
            };
        }
    }
}